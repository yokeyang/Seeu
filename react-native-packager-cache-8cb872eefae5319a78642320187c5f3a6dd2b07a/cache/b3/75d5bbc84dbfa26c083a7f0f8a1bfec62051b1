Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/home/yoke/seeu/node_modules/react-native-textinput-effects/lib/Makiko.js';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _BaseInput2 = require('./BaseInput');

var _BaseInput3 = _interopRequireDefault(_BaseInput2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PADDING = 16;

var Makiko = (_temp = _class = function (_BaseInput) {
  _inherits(Makiko, _BaseInput);

  function Makiko() {
    _classCallCheck(this, Makiko);

    return _possibleConstructorReturn(this, (Makiko.__proto__ || Object.getPrototypeOf(Makiko)).apply(this, arguments));
  }

  _createClass(Makiko, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          iconClass = _props.iconClass,
          iconColor = _props.iconColor,
          iconName = _props.iconName,
          iconSize = _props.iconSize,
          iconWidth = _props.iconWidth,
          containerStyle = _props.style,
          inputHeight = _props.height,
          inputStyle = _props.inputStyle,
          label = _props.label,
          labelStyle = _props.labelStyle;
      var _state = this.state,
          width = _state.width,
          focusedAnim = _state.focusedAnim,
          value = _state.value;

      var AnimatedIcon = _reactNative.Animated.createAnimatedComponent(iconClass);

      return _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.container, containerStyle],
          onLayout: this._onLayout,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 76
          }
        },
        _react2.default.createElement(
          _reactNative.TouchableWithoutFeedback,
          { onPress: this.focus, __source: {
              fileName: _jsxFileName,
              lineNumber: 80
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: {
                position: 'absolute',
                height: inputHeight,
                width: width
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 81
              }
            },
            _react2.default.createElement(AnimatedIcon, {
              name: iconName,
              color: iconColor,
              style: {
                position: 'absolute',
                backgroundColor: 'transparent',
                top: focusedAnim.interpolate({
                  inputRange: [0, 0.2, 1],
                  outputRange: [8, iconSize * -1, iconSize * -1]
                }),
                left: focusedAnim.interpolate({
                  inputRange: [0, 0.2, 1],
                  outputRange: [PADDING, -22, -22]
                }),
                height: focusedAnim.interpolate({
                  inputRange: [0, 0.2, 1],
                  outputRange: [iconSize, inputHeight * 2, inputHeight * 2]
                }),
                fontSize: focusedAnim.interpolate({
                  inputRange: [0, 0.2, 1],
                  outputRange: [iconSize, iconSize * 4, iconSize * 4]
                })
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 88
              }
            }),
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: [styles.label, labelStyle, { left: iconWidth, color: iconColor }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 112
                }
              },
              label
            )
          )
        ),
        _react2.default.createElement(_reactNative.Animated.View, {
          style: {
            position: 'absolute',
            backgroundColor: 'white',
            left: iconWidth,
            height: inputHeight,
            width: focusedAnim.interpolate({
              inputRange: [0, 0.2, 1],
              outputRange: [0, 0, width]
            })
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 123
          }
        }),
        _react2.default.createElement(_reactNative.TextInput, _extends({
          ref: 'input'
        }, this.props, {
          style: [styles.textInput, inputStyle, {
            width: width,
            height: inputHeight
          }],
          value: value,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onFocus: this._onFocus,
          underlineColorAndroid: 'transparent',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 135
          }
        }))
      );
    }
  }]);

  return Makiko;
}(_BaseInput3.default), _class.propTypes = {
  iconClass: _propTypes2.default.func.isRequired,

  iconName: _propTypes2.default.string.isRequired,

  iconColor: _propTypes2.default.string,

  iconSize: _propTypes2.default.number,
  iconWidth: _propTypes2.default.number
}, _class.defaultProps = {
  iconColor: 'white',
  iconSize: 30,
  iconWidth: 60,
  height: 48,
  easing: _reactNative.Easing.bezier(0.7, 0, 0.3, 1),
  animationDuration: 300
}, _temp);
exports.default = Makiko;


var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: '#CBCBCB',
    overflow: 'hidden'
  },
  label: {
    position: 'absolute',
    top: PADDING,
    fontSize: 16,
    fontFamily: 'Arial',
    fontWeight: 'bold',
    color: 'white',
    backgroundColor: 'transparent'
  },
  textInput: {
    paddingHorizontal: PADDING,
    paddingVertical: 0,
    color: 'black',
    fontSize: 18
  }
});