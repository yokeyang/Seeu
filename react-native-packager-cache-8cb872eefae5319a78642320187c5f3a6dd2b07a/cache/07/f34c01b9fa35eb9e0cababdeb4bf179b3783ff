Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/home/yoke/seeu/node_modules/react-native-textinput-effects/lib/Kaede.js';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _BaseInput2 = require('./BaseInput');

var _BaseInput3 = _interopRequireDefault(_BaseInput2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PADDING = 16;

var Kaede = (_temp = _class = function (_BaseInput) {
  _inherits(Kaede, _BaseInput);

  function Kaede() {
    _classCallCheck(this, Kaede);

    return _possibleConstructorReturn(this, (Kaede.__proto__ || Object.getPrototypeOf(Kaede)).apply(this, arguments));
  }

  _createClass(Kaede, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          label = _props.label,
          containerStyle = _props.style,
          inputStyle = _props.inputStyle,
          labelStyle = _props.labelStyle,
          inputHeight = _props.height;
      var _state = this.state,
          width = _state.width,
          focusedAnim = _state.focusedAnim,
          value = _state.value;

      var inputWidth = width * 0.6;

      var flatLabelStyle = _reactNative.StyleSheet.flatten(labelStyle);
      var labelBackgroundColor = '#EBEAEA';
      if (flatLabelStyle && flatLabelStyle.backgroundColor) {
        labelBackgroundColor = flatLabelStyle.backgroundColor;
      }

      return _react2.default.createElement(
        _reactNative.View,
        { style: containerStyle, onLayout: this._onLayout, __source: {
            fileName: _jsxFileName,
            lineNumber: 46
          }
        },
        _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: {
              width: inputWidth,
              marginLeft: focusedAnim.interpolate({
                inputRange: [0, 1],
                outputRange: [inputWidth * -1, 0]
              })
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 47
            }
          },
          _react2.default.createElement(_reactNative.TextInput, _extends({
            ref: 'input'
          }, this.props, {
            style: [styles.textInput, inputStyle, { height: inputHeight }],
            value: value,
            onBlur: this._onBlur,
            onFocus: this._onFocus,
            onChange: this._onChange,
            underlineColorAndroid: 'transparent',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 56
            }
          }))
        ),
        _react2.default.createElement(
          _reactNative.TouchableWithoutFeedback,
          { onPress: this.focus, __source: {
              fileName: _jsxFileName,
              lineNumber: 67
            }
          },
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: {
                position: 'absolute',
                justifyContent: 'center',
                top: 0,
                height: inputHeight,
                width: width,
                left: focusedAnim.interpolate({
                  inputRange: [0, 1],
                  outputRange: [0, inputWidth]
                }),
                backgroundColor: labelBackgroundColor
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 68
              }
            },
            _react2.default.createElement(
              _reactNative.Text,
              { style: [styles.label, labelStyle], __source: {
                  fileName: _jsxFileName,
                  lineNumber: 82
                }
              },
              label
            )
          )
        )
      );
    }
  }]);

  return Kaede;
}(_BaseInput3.default), _class.propTypes = {
  easing: _propTypes2.default.func,
  height: _propTypes2.default.number
}, _class.defaultProps = {
  easing: _reactNative.Easing.bezier(0.2, 1, 0.3, 1),
  height: 60
}, _temp);
exports.default = Kaede;


var styles = _reactNative.StyleSheet.create({
  label: {
    marginHorizontal: PADDING,
    fontSize: 16,
    fontWeight: 'bold',
    color: '#6a7989'
  },
  textInput: {
    padding: PADDING,
    backgroundColor: 'white',
    color: 'black',
    fontSize: 16,
    fontWeight: 'bold'
  }
});